import groovy.text.GStringTemplateEngine
import org.freecompany.redline.payload.*
import org.freecompany.redline.header.*

// https://github.com/nebula-plugins/gradle-ospackage-plugin/issues/59
Contents.addBuiltinDirectory('/etc/httpd/conf.d/')

defaultTasks 'clean', 'rpm'

buildscript {
    ext {
        env = System.getenv()
        buildNumber = env.BUILD_NUMBER ? env.BUILD_NUMBER.toString() : ((int) (System.currentTimeMillis() / 1000)).toString()
        BASE_REPO_URL = hasProperty('BASE_REPO_URL') ? BASE_REPO_URL : 'http://10.35.178.198:8081/artifactory'
        PLUGINS_REPO = hasProperty('PLUGINS_REPO') ? asmnext - trunk - external : 'plugins-release'
        PLUGINS_REPO_URL = hasProperty('PLUGINS_REPO_URL') ? PLUGINS_REPO_URL : "${BASE_REPO_URL}/${PLUGINS_REPO}"
        rpm_packageName = env.RPM_PACKAGENAME ? env.RPM_PACKAGENAME : 'Dell-ASM-asm-deployer'
        rpm_description = env.RPM_DESCRIPTION ? env.RPM_DESCRIPTION : 'asm-deployer for Dell ASM'
        rpm_summary = env.RPM_SUMMARY ? env.RPM_SUMMARY : 'asm-deployer for Dell ASM'
        rpm_version = env.RPM_VERSION ? env.RPM_VERSION : '7.5.0'
        rpm_vendor = env.RPM_VENDOR ? env.RPM_VENDOR : 'Dell, Inc.'
        rpm_url = env.RPM_URL ? env.RPM_URL : 'http://www.dell.com/'
        rpm_license = env.RPM_LICENSE ? env.RPM_LICENSE : 'DELL END USER LICENSE AGREEMENT - TYPE A'
        rpm_packager = env.RPM_PACKAGER ? env.RPM_PACKAGER : 'vsd_buildmeisters'
    }

    repositories {
        maven {
            url PLUGINS_REPO_URL
        }
    }
    dependencies {
        classpath 'org.redline-rpm:redline:1.1.12'
    }
}


task rpm() << {
    File rpmDestinationDirectory = new File("${buildDir}/distributions")
    if (!rpmDestinationDirectory.isDirectory()) {
        rpmDestinationDirectory.mkdirs()
    }

    // write dell product version and release to a properties file
    // and to a profile.d file and include that file in the rpm
    File productPropertiesFile = new File("${buildDir}/${project.rpm_packageName}.properties")
    productPropertiesFile << "VERSION=$project.rpm_version\n"
    productPropertiesFile << "RELEASE=$project.buildNumber\n"
    File profile_d_file = new File("${buildDir}/${project.rpm_packageName}.sh")
    profile_d_file << "${project.rpm_packageName.tr('-', '_')}_VERSION=$project.rpm_version\n"
    profile_d_file << "export ${project.rpm_packageName.tr('-', '_')}_VERSION\n"
    profile_d_file << "${project.rpm_packageName.tr('-', '_')}_RELEASE=$project.buildNumber\n"
    profile_d_file << "export ${project.rpm_packageName.tr('-', '_')}_RELEASE\n"

    org.freecompany.redline.Builder rpmBuilder = new org.freecompany.redline.Builder()

    // Depends on razor rpm having set up razor user and torquebox
    rpmBuilder.addDependencyMore('Dell-ASM-razor-server', '1.7.8')

    // Depends on nagios rpm to bring the correctly selinux tagged plugin dirs etc
    rpmBuilder.addDependencyMore('nagios', '3.5.1')
    rpmBuilder.addDependencyMore('nagios-plugins-nrpe', '2.15')
    rpmBuilder.addDependencyMore('nagios-plugins-ping', '1.4.16')

    // Dependencies for the nagios plugins
    rpmBuilder.addDependencyMore('freeipmi', '1.2.1')
    rpmBuilder.addDependencyMore('ipmitool', '1.8.11')
    rpmBuilder.addDependencyMore('pywbem', '0.7.0')

    // Graphite dependencies
    rpmBuilder.addDependencyMore('graphite-web', '0.9.12')
    rpmBuilder.addDependencyMore('graphite-web-selinux', '0.9.12')
    rpmBuilder.addDependencyMore('python-whisper', '0.9.12')
    rpmBuilder.addDependencyMore('python-carbon', '0.9.12')

    // Directory where REST service will write deployment information
    rpmBuilder.addDirectory("/opt/Dell/ASM/deployments", 0775, Directive.NONE, 'razor', 'razor', false)

    // Directory for writing puppet device call log files
    rpmBuilder.addDirectory("/opt/Dell/ASM/device", 0775, Directive.NONE, 'razor', 'razor', false)

    // SCVMM and Equallogic module discovery scripts write cache files here. SCVMM is being run
    // by tomcat as the tomcat user. Equallogic is currently being run by puppet-script-device
    // as root user. For now making this directory as world-writeable with sticky bit (like /tmp)
    // so that different users can't clobber each other's files. Longer-term the scvmm script
    // should also be run by puppet-script-device and then this could be owned by razor:razor 0755
    // Directory ownership is changed to tomcat:tomcat. Root user can read and write with any permission
    rpmBuilder.addDirectory("/opt/Dell/ASM/cache", 1777, Directive.NONE, 'tomcat', 'tomcat', false)

    // Install directory.
    // Installed as root:razor with 0775 so that torquebox can write the Gemfile.lock file.
    // Torquebox should not need to write any other files into /opt/asm-deployer
    rpmBuilder.addDirectory("/opt/asm-deployer", 0775, Directive.NONE, 'root', 'razor', false)

    // Add files copied from https://github.com/dell-asm/asm-deployer
    fileTree(dir: '../asm-deployer', include: '**').visit {
        if (it.file.isDirectory() && !it.file.name.equals(".svn")) {
            rpmBuilder.addDirectory("/opt/asm-deployer/${it.path}", 0755, Directive.NONE, 'root', 'razor', false)
        } else if (it.file.isFile()) {
            if ('lib/asm/scvmm_cluster_ip.rb' == it.path ||
                'lib/asm/scvmm_macaddress.rb' == it.path ||
                'scripts/puppet_certname.sh' == it.path ||
                'scripts/decrypt_secretid.rb' == it.path) {
                rpmBuilder.addFile("/opt/asm-deployer/${it.path}", it.file, 0755, Directive.NONE, 'root', 'razor')
            } else if (it.path == "nagios/nagios-export.rb") {
                rpmBuilder.addFile("/opt/asm-deployer/${it.path}", it.file, 0755, Directive.NONE, 'root', 'root')
            } else if (it.path == "nagios/poll_idrac8_sensors.rb") {
                rpmBuilder.addFile("/opt/asm-deployer/${it.path}", it.file, 0755, Directive.NONE, 'root', 'root')
            } else if (it.path == "nagios/check-ipmi.rb") {
                rpmBuilder.addFile("/usr/lib64/nagios/plugins/check-ipmi.rb", it.file, 0755, Directive.NONE, 'root', 'root')
            } else if (it.path == "nagios/check-racadm.rb") {
                rpmBuilder.addFile("/usr/lib64/nagios/plugins/check-racadm.rb", it.file, 0755, Directive.NONE, 'root', 'root')
            } else if (it.path == "nagios/check-wsman.rb") {
                rpmBuilder.addFile("/usr/lib64/nagios/plugins/check-wsman.rb", it.file, 0755, Directive.NONE, 'root', 'root')
            } else if (it.path == "nagios/check_esxi_hardware.py") {
                rpmBuilder.addFile("/usr/lib64/nagios/plugins/check_esxi_hardware.py", it.file, 0755, Directive.NONE, 'root', 'root')
            } else if (it.path == "nagios/load_short_circuit.sh") {
                rpmBuilder.addFile("/usr/lib64/nagios/plugins/load_short_circuit.sh", it.file, 0755, Directive.NONE, 'root', 'root')
            } else if (it.path == "nagios/process_nagios_status.rb") {
                rpmBuilder.addFile("/usr/lib64/nagios/plugins/process_nagios_status.rb", it.file, 0755, Directive.NONE, 'root', 'root')
            } else if (it.path == "nagios/asm_nagios.cron") {
                rpmBuilder.addFile("/etc/cron.d/asm_nagios", it.file, 0644, Directive.NONE, 'root', 'root')
            } else if (it.path == "nagios/graphite-web.conf") {
                rpmBuilder.addFile("/etc/httpd/conf.d/asm-graphite-web.conf", it.file, 0644, Directive.NONE, 'root', 'root')
            } else {
                rpmBuilder.addFile("/opt/asm-deployer/${it.path}", it.file, 0644, Directive.NONE, 'root', 'razor')
            }
        }
    }

    rpmBuilder.setPackage(project.rpm_packageName, project.rpm_version, project.buildNumber.toString())
    rpmBuilder.setType(RpmType.BINARY)
    rpmBuilder.setPlatform(Architecture.NOARCH, 'LINUX')
    rpmBuilder.setSummary(project.rpm_summary)
    rpmBuilder.setDescription(project.rpm_description)
    rpmBuilder.setBuildHost('localhost')
    rpmBuilder.setLicense(project.rpm_license)
    rpmBuilder.setGroup('Enterprise Systems Management')
    rpmBuilder.setDistribution('')
    rpmBuilder.setVendor(project.rpm_vendor)
    rpmBuilder.setPackager(project.rpm_packager)
    rpmBuilder.setUrl(project.rpm_url)
    rpmBuilder.setPostInstallScript(file('scripts/rpm/postInstall.sh').text)
    println rpmBuilder.build(rpmDestinationDirectory)
}

task clean(type: Delete) {
    delete buildDir
}
